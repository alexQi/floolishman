package strategies

import (
	"floolishman/indicator"
	"floolishman/model"
	"floolishman/types"
	"floolishman/utils/calc"
	"reflect"
)

type Test15m struct {
	BaseStrategy
}

func (s Test15m) SortScore() int {
	return 80
}

func (s Test15m) Timeframe() string {
	return "15m"
}

func (s Test15m) WarmupPeriod() int {
	return 30 // 预热期设定为24个数据点
}

func (s Test15m) Indicators(df *model.Dataframe) {
	bbUpper, bbMiddle, bbLower := indicator.BB(df.Close, 21, 2.0, 2.0)
	df.Metadata["bb_upper"] = bbUpper
	df.Metadata["bb_middle"] = bbMiddle
	df.Metadata["bb_lower"] = bbLower
	df.Metadata["momentum"] = indicator.Momentum(df.Close, 14)
	df.Metadata["atr"] = indicator.ATR(df.High, df.Low, df.Close, 14)
	df.Metadata["avgVolume"] = indicator.SMA(df.Volume, 14)
	df.Metadata["volume"] = df.Volume
}

func (s *Test15m) OnCandle(df *model.Dataframe) types.StrategyPosition {
	strategyPosition := types.StrategyPosition{
		Tendency:     s.checkMarketTendency(df),
		StrategyName: reflect.TypeOf(s).Elem().Name(),
		Pair:         df.Pair,
		Score:        s.SortScore(),
		LastAtr:      df.Metadata["atr"].Last(1),
	}

	momentums := df.Metadata["momentum"].LastValues(2)
	volume := df.Metadata["volume"].LastValues(2)
	avgVolume := df.Metadata["avgVolume"].LastValues(2)

	isCross, direction := s.bactchCheckVolume(volume, avgVolume, 1.5)

	momentumsDistance := momentums[1] - momentums[0]
	// 动量向上
	if momentumsDistance > 8 &&
		momentums[1] < 35 &&
		isCross &&
		direction == "rise" {
		strategyPosition.Useable = true
		strategyPosition.Side = model.SideTypeBuy
	}
	// 动量向下
	if calc.Abs(momentumsDistance) > 8 &&
		momentumsDistance < 0 &&
		calc.Abs(momentums[1]) < 18 &&
		isCross &&
		direction == "fall" {
		strategyPosition.Useable = true
		strategyPosition.Side = model.SideTypeSell
	}
	return strategyPosition
}
