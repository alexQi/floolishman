// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v5.27.1
// source: params.proto

package guider

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GuiderItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Account                string  `protobuf:"bytes,2,opt,name=account,proto3" json:"account,omitempty"`
	AvatarUrl              string  `protobuf:"bytes,3,opt,name=avatarUrl,proto3" json:"avatarUrl,omitempty"`
	Nickname               string  `protobuf:"bytes,4,opt,name=nickname,proto3" json:"nickname,omitempty"`
	CopyPortfolioId        string  `protobuf:"bytes,5,opt,name=copyPortfolioId,proto3" json:"copyPortfolioId,omitempty"`
	LeadPortfolioId        string  `protobuf:"bytes,6,opt,name=leadPortfolioId,proto3" json:"leadPortfolioId,omitempty"`
	StartDate              int64   `protobuf:"varint,7,opt,name=startDate,proto3" json:"startDate,omitempty"`
	EndDate                int64   `protobuf:"varint,8,opt,name=endDate,proto3" json:"endDate,omitempty"`
	ClosedReason           string  `protobuf:"bytes,9,opt,name=closedReason,proto3" json:"closedReason,omitempty"`
	NetCopyAmount          float64 `protobuf:"fixed64,10,opt,name=netCopyAmount,proto3" json:"netCopyAmount,omitempty"`
	NetCopyAsset           string  `protobuf:"bytes,11,opt,name=netCopyAsset,proto3" json:"netCopyAsset,omitempty"`
	UnrealizedPnl          float64 `protobuf:"fixed64,12,opt,name=unrealizedPnl,proto3" json:"unrealizedPnl,omitempty"`
	UnrealizedPnlAsset     string  `protobuf:"bytes,13,opt,name=unrealizedPnlAsset,proto3" json:"unrealizedPnlAsset,omitempty"`
	RealizedPnl            float64 `protobuf:"fixed64,14,opt,name=realizedPnl,proto3" json:"realizedPnl,omitempty"`
	RealizedPnlAsset       string  `protobuf:"bytes,15,opt,name=realizedPnlAsset,proto3" json:"realizedPnlAsset,omitempty"`
	NetProfitAmount        float64 `protobuf:"fixed64,16,opt,name=netProfitAmount,proto3" json:"netProfitAmount,omitempty"`
	NetProfitAsset         string  `protobuf:"bytes,17,opt,name=netProfitAsset,proto3" json:"netProfitAsset,omitempty"`
	ProfitSharedAmount     float64 `protobuf:"fixed64,18,opt,name=profitSharedAmount,proto3" json:"profitSharedAmount,omitempty"`
	ProfitSharedAsset      string  `protobuf:"bytes,19,opt,name=profitSharedAsset,proto3" json:"profitSharedAsset,omitempty"`
	UnProfitSharedAmount   float64 `protobuf:"fixed64,20,opt,name=unProfitSharedAmount,proto3" json:"unProfitSharedAmount,omitempty"`
	MarginBalance          float64 `protobuf:"fixed64,21,opt,name=marginBalance,proto3" json:"marginBalance,omitempty"`
	MarginBalanceAsset     string  `protobuf:"bytes,22,opt,name=marginBalanceAsset,proto3" json:"marginBalanceAsset,omitempty"`
	ProfitSharingRate      string  `protobuf:"bytes,23,opt,name=profitSharingRate,proto3" json:"profitSharingRate,omitempty"`
	CopierUnlockPeriodDays int64   `protobuf:"varint,24,opt,name=copierUnlockPeriodDays,proto3" json:"copierUnlockPeriodDays,omitempty"`
	TotalSlRate            float64 `protobuf:"fixed64,25,opt,name=totalSlRate,proto3" json:"totalSlRate,omitempty"`
}

func (x *GuiderItem) Reset() {
	*x = GuiderItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_params_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuiderItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuiderItem) ProtoMessage() {}

func (x *GuiderItem) ProtoReflect() protoreflect.Message {
	mi := &file_params_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuiderItem.ProtoReflect.Descriptor instead.
func (*GuiderItem) Descriptor() ([]byte, []int) {
	return file_params_proto_rawDescGZIP(), []int{0}
}

func (x *GuiderItem) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *GuiderItem) GetAvatarUrl() string {
	if x != nil {
		return x.AvatarUrl
	}
	return ""
}

func (x *GuiderItem) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *GuiderItem) GetCopyPortfolioId() string {
	if x != nil {
		return x.CopyPortfolioId
	}
	return ""
}

func (x *GuiderItem) GetLeadPortfolioId() string {
	if x != nil {
		return x.LeadPortfolioId
	}
	return ""
}

func (x *GuiderItem) GetStartDate() int64 {
	if x != nil {
		return x.StartDate
	}
	return 0
}

func (x *GuiderItem) GetEndDate() int64 {
	if x != nil {
		return x.EndDate
	}
	return 0
}

func (x *GuiderItem) GetClosedReason() string {
	if x != nil {
		return x.ClosedReason
	}
	return ""
}

func (x *GuiderItem) GetNetCopyAmount() float64 {
	if x != nil {
		return x.NetCopyAmount
	}
	return 0
}

func (x *GuiderItem) GetNetCopyAsset() string {
	if x != nil {
		return x.NetCopyAsset
	}
	return ""
}

func (x *GuiderItem) GetUnrealizedPnl() float64 {
	if x != nil {
		return x.UnrealizedPnl
	}
	return 0
}

func (x *GuiderItem) GetUnrealizedPnlAsset() string {
	if x != nil {
		return x.UnrealizedPnlAsset
	}
	return ""
}

func (x *GuiderItem) GetRealizedPnl() float64 {
	if x != nil {
		return x.RealizedPnl
	}
	return 0
}

func (x *GuiderItem) GetRealizedPnlAsset() string {
	if x != nil {
		return x.RealizedPnlAsset
	}
	return ""
}

func (x *GuiderItem) GetNetProfitAmount() float64 {
	if x != nil {
		return x.NetProfitAmount
	}
	return 0
}

func (x *GuiderItem) GetNetProfitAsset() string {
	if x != nil {
		return x.NetProfitAsset
	}
	return ""
}

func (x *GuiderItem) GetProfitSharedAmount() float64 {
	if x != nil {
		return x.ProfitSharedAmount
	}
	return 0
}

func (x *GuiderItem) GetProfitSharedAsset() string {
	if x != nil {
		return x.ProfitSharedAsset
	}
	return ""
}

func (x *GuiderItem) GetUnProfitSharedAmount() float64 {
	if x != nil {
		return x.UnProfitSharedAmount
	}
	return 0
}

func (x *GuiderItem) GetMarginBalance() float64 {
	if x != nil {
		return x.MarginBalance
	}
	return 0
}

func (x *GuiderItem) GetMarginBalanceAsset() string {
	if x != nil {
		return x.MarginBalanceAsset
	}
	return ""
}

func (x *GuiderItem) GetProfitSharingRate() string {
	if x != nil {
		return x.ProfitSharingRate
	}
	return ""
}

func (x *GuiderItem) GetCopierUnlockPeriodDays() int64 {
	if x != nil {
		return x.CopierUnlockPeriodDays
	}
	return 0
}

func (x *GuiderItem) GetTotalSlRate() float64 {
	if x != nil {
		return x.TotalSlRate
	}
	return 0
}

type GuiderSymbolConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Account          string `protobuf:"bytes,2,opt,name=account,proto3" json:"account,omitempty"`
	PortfolioId      string `protobuf:"bytes,3,opt,name=portfolioId,proto3" json:"portfolioId,omitempty"`
	Symbol           string `protobuf:"bytes,4,opt,name=symbol,proto3" json:"symbol,omitempty"`
	MarginType       string `protobuf:"bytes,5,opt,name=marginType,proto3" json:"marginType,omitempty"`
	Leverage         int32  `protobuf:"varint,6,opt,name=leverage,proto3" json:"leverage,omitempty"`
	MaxNotionalValue string `protobuf:"bytes,7,opt,name=maxNotionalValue,proto3" json:"maxNotionalValue,omitempty"`
}

func (x *GuiderSymbolConfig) Reset() {
	*x = GuiderSymbolConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_params_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuiderSymbolConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuiderSymbolConfig) ProtoMessage() {}

func (x *GuiderSymbolConfig) ProtoReflect() protoreflect.Message {
	mi := &file_params_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuiderSymbolConfig.ProtoReflect.Descriptor instead.
func (*GuiderSymbolConfig) Descriptor() ([]byte, []int) {
	return file_params_proto_rawDescGZIP(), []int{1}
}

func (x *GuiderSymbolConfig) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *GuiderSymbolConfig) GetPortfolioId() string {
	if x != nil {
		return x.PortfolioId
	}
	return ""
}

func (x *GuiderSymbolConfig) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *GuiderSymbolConfig) GetMarginType() string {
	if x != nil {
		return x.MarginType
	}
	return ""
}

func (x *GuiderSymbolConfig) GetLeverage() int32 {
	if x != nil {
		return x.Leverage
	}
	return 0
}

func (x *GuiderSymbolConfig) GetMaxNotionalValue() string {
	if x != nil {
		return x.MaxNotionalValue
	}
	return ""
}

type GuiderPosition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PortfolioId            string  `protobuf:"bytes,2,opt,name=portfolioId,proto3" json:"portfolioId,omitempty"`
	Symbol                 string  `protobuf:"bytes,3,opt,name=symbol,proto3" json:"symbol,omitempty"`
	PositionSide           string  `protobuf:"bytes,4,opt,name=positionSide,proto3" json:"positionSide,omitempty"`
	PositionAmount         float64 `protobuf:"fixed64,5,opt,name=positionAmount,proto3" json:"positionAmount,omitempty"`
	EntryPrice             float64 `protobuf:"fixed64,6,opt,name=entryPrice,proto3" json:"entryPrice,omitempty"`
	BreakEvenPrice         float64 `protobuf:"fixed64,7,opt,name=breakEvenPrice,proto3" json:"breakEvenPrice,omitempty"`
	MarkPrice              float64 `protobuf:"fixed64,8,opt,name=markPrice,proto3" json:"markPrice,omitempty"`
	UnrealizedProfit       float64 `protobuf:"fixed64,9,opt,name=unrealizedProfit,proto3" json:"unrealizedProfit,omitempty"`
	LiquidationPrice       float64 `protobuf:"fixed64,10,opt,name=liquidationPrice,proto3" json:"liquidationPrice,omitempty"`
	IsolatedMargin         float64 `protobuf:"fixed64,11,opt,name=isolatedMargin,proto3" json:"isolatedMargin,omitempty"`
	NotionalValue          float64 `protobuf:"fixed64,12,opt,name=notionalValue,proto3" json:"notionalValue,omitempty"`
	Collateral             string  `protobuf:"bytes,13,opt,name=collateral,proto3" json:"collateral,omitempty"`
	IsolatedWallet         float64 `protobuf:"fixed64,14,opt,name=isolatedWallet,proto3" json:"isolatedWallet,omitempty"`
	CumRealized            float64 `protobuf:"fixed64,15,opt,name=cumRealized,proto3" json:"cumRealized,omitempty"`
	InitialMargin          float64 `protobuf:"fixed64,16,opt,name=initialMargin,proto3" json:"initialMargin,omitempty"`
	MaintMargin            float64 `protobuf:"fixed64,17,opt,name=maintMargin,proto3" json:"maintMargin,omitempty"`
	AvailQuote             float64 `protobuf:"fixed64,18,opt,name=availQuote,proto3" json:"availQuote,omitempty"`
	PositionInitialMargin  float64 `protobuf:"fixed64,19,opt,name=positionInitialMargin,proto3" json:"positionInitialMargin,omitempty"`
	OpenOrderInitialMargin float64 `protobuf:"fixed64,20,opt,name=openOrderInitialMargin,proto3" json:"openOrderInitialMargin,omitempty"`
	Adl                    int32   `protobuf:"varint,21,opt,name=adl,proto3" json:"adl,omitempty"`
	AskNotional            float64 `protobuf:"fixed64,22,opt,name=askNotional,proto3" json:"askNotional,omitempty"`
	BidNotional            float64 `protobuf:"fixed64,23,opt,name=bidNotional,proto3" json:"bidNotional,omitempty"`
}

func (x *GuiderPosition) Reset() {
	*x = GuiderPosition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_params_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuiderPosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuiderPosition) ProtoMessage() {}

func (x *GuiderPosition) ProtoReflect() protoreflect.Message {
	mi := &file_params_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuiderPosition.ProtoReflect.Descriptor instead.
func (*GuiderPosition) Descriptor() ([]byte, []int) {
	return file_params_proto_rawDescGZIP(), []int{2}
}

func (x *GuiderPosition) GetPortfolioId() string {
	if x != nil {
		return x.PortfolioId
	}
	return ""
}

func (x *GuiderPosition) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *GuiderPosition) GetPositionSide() string {
	if x != nil {
		return x.PositionSide
	}
	return ""
}

func (x *GuiderPosition) GetPositionAmount() float64 {
	if x != nil {
		return x.PositionAmount
	}
	return 0
}

func (x *GuiderPosition) GetEntryPrice() float64 {
	if x != nil {
		return x.EntryPrice
	}
	return 0
}

func (x *GuiderPosition) GetBreakEvenPrice() float64 {
	if x != nil {
		return x.BreakEvenPrice
	}
	return 0
}

func (x *GuiderPosition) GetMarkPrice() float64 {
	if x != nil {
		return x.MarkPrice
	}
	return 0
}

func (x *GuiderPosition) GetUnrealizedProfit() float64 {
	if x != nil {
		return x.UnrealizedProfit
	}
	return 0
}

func (x *GuiderPosition) GetLiquidationPrice() float64 {
	if x != nil {
		return x.LiquidationPrice
	}
	return 0
}

func (x *GuiderPosition) GetIsolatedMargin() float64 {
	if x != nil {
		return x.IsolatedMargin
	}
	return 0
}

func (x *GuiderPosition) GetNotionalValue() float64 {
	if x != nil {
		return x.NotionalValue
	}
	return 0
}

func (x *GuiderPosition) GetCollateral() string {
	if x != nil {
		return x.Collateral
	}
	return ""
}

func (x *GuiderPosition) GetIsolatedWallet() float64 {
	if x != nil {
		return x.IsolatedWallet
	}
	return 0
}

func (x *GuiderPosition) GetCumRealized() float64 {
	if x != nil {
		return x.CumRealized
	}
	return 0
}

func (x *GuiderPosition) GetInitialMargin() float64 {
	if x != nil {
		return x.InitialMargin
	}
	return 0
}

func (x *GuiderPosition) GetMaintMargin() float64 {
	if x != nil {
		return x.MaintMargin
	}
	return 0
}

func (x *GuiderPosition) GetAvailQuote() float64 {
	if x != nil {
		return x.AvailQuote
	}
	return 0
}

func (x *GuiderPosition) GetPositionInitialMargin() float64 {
	if x != nil {
		return x.PositionInitialMargin
	}
	return 0
}

func (x *GuiderPosition) GetOpenOrderInitialMargin() float64 {
	if x != nil {
		return x.OpenOrderInitialMargin
	}
	return 0
}

func (x *GuiderPosition) GetAdl() int32 {
	if x != nil {
		return x.Adl
	}
	return 0
}

func (x *GuiderPosition) GetAskNotional() float64 {
	if x != nil {
		return x.AskNotional
	}
	return 0
}

func (x *GuiderPosition) GetBidNotional() float64 {
	if x != nil {
		return x.BidNotional
	}
	return 0
}

type GuiderOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	OriginId           string `protobuf:"bytes,2,opt,name=originId,proto3" json:"originId,omitempty"`
	OrderId            int64  `protobuf:"varint,3,opt,name=orderId,proto3" json:"orderId,omitempty"`
	Symbol             string `protobuf:"bytes,4,opt,name=symbol,proto3" json:"symbol,omitempty"`
	ClientOrderId      string `protobuf:"bytes,5,opt,name=clientOrderId,proto3" json:"clientOrderId,omitempty"`
	OrigClientOrderId  string `protobuf:"bytes,6,opt,name=origClientOrderId,proto3" json:"origClientOrderId,omitempty"`
	Price              string `protobuf:"bytes,7,opt,name=price,proto3" json:"price,omitempty"`
	OrigQty            string `protobuf:"bytes,8,opt,name=origQty,proto3" json:"origQty,omitempty"`
	ExecutedQty        string `protobuf:"bytes,9,opt,name=executedQty,proto3" json:"executedQty,omitempty"`
	ExecutedQuoteQty   string `protobuf:"bytes,10,opt,name=executedQuoteQty,proto3" json:"executedQuoteQty,omitempty"`
	Status             string `protobuf:"bytes,11,opt,name=status,proto3" json:"status,omitempty"`
	TimeInForce        string `protobuf:"bytes,12,opt,name=timeInForce,proto3" json:"timeInForce,omitempty"`
	Type               string `protobuf:"bytes,13,opt,name=type,proto3" json:"type,omitempty"`
	Side               string `protobuf:"bytes,14,opt,name=side,proto3" json:"side,omitempty"`
	StopPrice          string `protobuf:"bytes,15,opt,name=stopPrice,proto3" json:"stopPrice,omitempty"`
	InsertTime         string `protobuf:"bytes,16,opt,name=insertTime,proto3" json:"insertTime,omitempty"`
	UpdateTime         string `protobuf:"bytes,17,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	DelegateMoney      string `protobuf:"bytes,18,opt,name=delegateMoney,proto3" json:"delegateMoney,omitempty"`
	AvgPrice           string `protobuf:"bytes,19,opt,name=avgPrice,proto3" json:"avgPrice,omitempty"`
	HasDetail          bool   `protobuf:"varint,20,opt,name=hasDetail,proto3" json:"hasDetail,omitempty"`
	TargetStrategy     int32  `protobuf:"varint,21,opt,name=targetStrategy,proto3" json:"targetStrategy,omitempty"`
	PriceProtect       int32  `protobuf:"varint,22,opt,name=priceProtect,proto3" json:"priceProtect,omitempty"`
	ReduceOnly         bool   `protobuf:"varint,23,opt,name=reduceOnly,proto3" json:"reduceOnly,omitempty"`
	WorkingType        string `protobuf:"bytes,24,opt,name=workingType,proto3" json:"workingType,omitempty"`
	OrigType           string `protobuf:"bytes,25,opt,name=origType,proto3" json:"origType,omitempty"`
	PositionSide       string `protobuf:"bytes,26,opt,name=positionSide,proto3" json:"positionSide,omitempty"`
	ActivatePrice      string `protobuf:"bytes,27,opt,name=activatePrice,proto3" json:"activatePrice,omitempty"`
	PriceRate          string `protobuf:"bytes,28,opt,name=priceRate,proto3" json:"priceRate,omitempty"`
	ClosePosition      bool   `protobuf:"varint,29,opt,name=closePosition,proto3" json:"closePosition,omitempty"`
	StrategyId         string `protobuf:"bytes,30,opt,name=strategyId,proto3" json:"strategyId,omitempty"`
	StrategySubId      string `protobuf:"bytes,31,opt,name=strategySubId,proto3" json:"strategySubId,omitempty"`
	StrategyType       string `protobuf:"bytes,32,opt,name=strategyType,proto3" json:"strategyType,omitempty"`
	MarkPrice          string `protobuf:"bytes,33,opt,name=markPrice,proto3" json:"markPrice,omitempty"`
	BaseAsset          string `protobuf:"bytes,34,opt,name=baseAsset,proto3" json:"baseAsset,omitempty"`
	QuoteAsset         string `protobuf:"bytes,35,opt,name=quoteAsset,proto3" json:"quoteAsset,omitempty"`
	MarginAsset        string `protobuf:"bytes,36,opt,name=marginAsset,proto3" json:"marginAsset,omitempty"`
	GoodTillDate       int32  `protobuf:"varint,37,opt,name=goodTillDate,proto3" json:"goodTillDate,omitempty"`
	PriceMatch         string `protobuf:"bytes,38,opt,name=priceMatch,proto3" json:"priceMatch,omitempty"`
	SelfProtectionMode string `protobuf:"bytes,39,opt,name=selfProtectionMode,proto3" json:"selfProtectionMode,omitempty"`
	PortfolioId        string `protobuf:"bytes,40,opt,name=portfolioId,proto3" json:"portfolioId,omitempty"`
	CreatedAt          string `protobuf:"bytes,41,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt          string `protobuf:"bytes,42,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
}

func (x *GuiderOrder) Reset() {
	*x = GuiderOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_params_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuiderOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuiderOrder) ProtoMessage() {}

func (x *GuiderOrder) ProtoReflect() protoreflect.Message {
	mi := &file_params_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuiderOrder.ProtoReflect.Descriptor instead.
func (*GuiderOrder) Descriptor() ([]byte, []int) {
	return file_params_proto_rawDescGZIP(), []int{3}
}

func (x *GuiderOrder) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GuiderOrder) GetOriginId() string {
	if x != nil {
		return x.OriginId
	}
	return ""
}

func (x *GuiderOrder) GetOrderId() int64 {
	if x != nil {
		return x.OrderId
	}
	return 0
}

func (x *GuiderOrder) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *GuiderOrder) GetClientOrderId() string {
	if x != nil {
		return x.ClientOrderId
	}
	return ""
}

func (x *GuiderOrder) GetOrigClientOrderId() string {
	if x != nil {
		return x.OrigClientOrderId
	}
	return ""
}

func (x *GuiderOrder) GetPrice() string {
	if x != nil {
		return x.Price
	}
	return ""
}

func (x *GuiderOrder) GetOrigQty() string {
	if x != nil {
		return x.OrigQty
	}
	return ""
}

func (x *GuiderOrder) GetExecutedQty() string {
	if x != nil {
		return x.ExecutedQty
	}
	return ""
}

func (x *GuiderOrder) GetExecutedQuoteQty() string {
	if x != nil {
		return x.ExecutedQuoteQty
	}
	return ""
}

func (x *GuiderOrder) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GuiderOrder) GetTimeInForce() string {
	if x != nil {
		return x.TimeInForce
	}
	return ""
}

func (x *GuiderOrder) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *GuiderOrder) GetSide() string {
	if x != nil {
		return x.Side
	}
	return ""
}

func (x *GuiderOrder) GetStopPrice() string {
	if x != nil {
		return x.StopPrice
	}
	return ""
}

func (x *GuiderOrder) GetInsertTime() string {
	if x != nil {
		return x.InsertTime
	}
	return ""
}

func (x *GuiderOrder) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *GuiderOrder) GetDelegateMoney() string {
	if x != nil {
		return x.DelegateMoney
	}
	return ""
}

func (x *GuiderOrder) GetAvgPrice() string {
	if x != nil {
		return x.AvgPrice
	}
	return ""
}

func (x *GuiderOrder) GetHasDetail() bool {
	if x != nil {
		return x.HasDetail
	}
	return false
}

func (x *GuiderOrder) GetTargetStrategy() int32 {
	if x != nil {
		return x.TargetStrategy
	}
	return 0
}

func (x *GuiderOrder) GetPriceProtect() int32 {
	if x != nil {
		return x.PriceProtect
	}
	return 0
}

func (x *GuiderOrder) GetReduceOnly() bool {
	if x != nil {
		return x.ReduceOnly
	}
	return false
}

func (x *GuiderOrder) GetWorkingType() string {
	if x != nil {
		return x.WorkingType
	}
	return ""
}

func (x *GuiderOrder) GetOrigType() string {
	if x != nil {
		return x.OrigType
	}
	return ""
}

func (x *GuiderOrder) GetPositionSide() string {
	if x != nil {
		return x.PositionSide
	}
	return ""
}

func (x *GuiderOrder) GetActivatePrice() string {
	if x != nil {
		return x.ActivatePrice
	}
	return ""
}

func (x *GuiderOrder) GetPriceRate() string {
	if x != nil {
		return x.PriceRate
	}
	return ""
}

func (x *GuiderOrder) GetClosePosition() bool {
	if x != nil {
		return x.ClosePosition
	}
	return false
}

func (x *GuiderOrder) GetStrategyId() string {
	if x != nil {
		return x.StrategyId
	}
	return ""
}

func (x *GuiderOrder) GetStrategySubId() string {
	if x != nil {
		return x.StrategySubId
	}
	return ""
}

func (x *GuiderOrder) GetStrategyType() string {
	if x != nil {
		return x.StrategyType
	}
	return ""
}

func (x *GuiderOrder) GetMarkPrice() string {
	if x != nil {
		return x.MarkPrice
	}
	return ""
}

func (x *GuiderOrder) GetBaseAsset() string {
	if x != nil {
		return x.BaseAsset
	}
	return ""
}

func (x *GuiderOrder) GetQuoteAsset() string {
	if x != nil {
		return x.QuoteAsset
	}
	return ""
}

func (x *GuiderOrder) GetMarginAsset() string {
	if x != nil {
		return x.MarginAsset
	}
	return ""
}

func (x *GuiderOrder) GetGoodTillDate() int32 {
	if x != nil {
		return x.GoodTillDate
	}
	return 0
}

func (x *GuiderOrder) GetPriceMatch() string {
	if x != nil {
		return x.PriceMatch
	}
	return ""
}

func (x *GuiderOrder) GetSelfProtectionMode() string {
	if x != nil {
		return x.SelfProtectionMode
	}
	return ""
}

func (x *GuiderOrder) GetPortfolioId() string {
	if x != nil {
		return x.PortfolioId
	}
	return ""
}

func (x *GuiderOrder) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *GuiderOrder) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

var File_params_proto protoreflect.FileDescriptor

var file_params_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1d,
	0x63, 0x6f, 0x6d, 0x2e, 0x66, 0x6c, 0x6f, 0x6f, 0x6c, 0x69, 0x73, 0x68, 0x6d, 0x61, 0x6e, 0x2e,
	0x67, 0x75, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0xc0, 0x07,
	0x0a, 0x0a, 0x47, 0x75, 0x69, 0x64, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72,
	0x55, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x55, 0x72, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x28, 0x0a, 0x0f, 0x63, 0x6f, 0x70, 0x79, 0x50, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69,
	0x6f, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x70, 0x79, 0x50,
	0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x6c, 0x65,
	0x61, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x49, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x6c, 0x65, 0x61, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c,
	0x69, 0x6f, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x12, 0x24, 0x0a, 0x0d, 0x6e, 0x65, 0x74, 0x43, 0x6f, 0x70, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x6e, 0x65, 0x74, 0x43, 0x6f, 0x70, 0x79,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x6e, 0x65, 0x74, 0x43, 0x6f, 0x70,
	0x79, 0x41, 0x73, 0x73, 0x65, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6e, 0x65,
	0x74, 0x43, 0x6f, 0x70, 0x79, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x75, 0x6e,
	0x72, 0x65, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x50, 0x6e, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0d, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x50, 0x6e, 0x6c,
	0x12, 0x2e, 0x0a, 0x12, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x50, 0x6e,
	0x6c, 0x41, 0x73, 0x73, 0x65, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x75, 0x6e,
	0x72, 0x65, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x50, 0x6e, 0x6c, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x50, 0x6e, 0x6c, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x50,
	0x6e, 0x6c, 0x12, 0x2a, 0x0a, 0x10, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x50, 0x6e,
	0x6c, 0x41, 0x73, 0x73, 0x65, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x50, 0x6e, 0x6c, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x28,
	0x0a, 0x0f, 0x6e, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x6e, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x6e, 0x65, 0x74, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x6e, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x12, 0x2e, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x2c, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x32,
	0x0a, 0x14, 0x75, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x75, 0x6e,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x6d, 0x61, 0x72, 0x67, 0x69,
	0x6e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x6d, 0x61, 0x72, 0x67,
	0x69, 0x6e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x74, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x61, 0x74, 0x65, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x53, 0x68, 0x61, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x61, 0x74, 0x65, 0x12, 0x36, 0x0a, 0x16, 0x63, 0x6f, 0x70, 0x69, 0x65, 0x72,
	0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x44, 0x61, 0x79, 0x73,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x63, 0x6f, 0x70, 0x69, 0x65, 0x72, 0x55, 0x6e,
	0x6c, 0x6f, 0x63, 0x6b, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x44, 0x61, 0x79, 0x73, 0x12, 0x20,
	0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x6c, 0x52, 0x61, 0x74, 0x65, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x6c, 0x52, 0x61, 0x74, 0x65,
	0x22, 0xd0, 0x01, 0x0a, 0x12, 0x47, 0x75, 0x69, 0x64, 0x65, 0x72, 0x53, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69,
	0x6f, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x6d,
	0x61, 0x72, 0x67, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c,
	0x65, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6c,
	0x65, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x6d, 0x61, 0x78, 0x4e, 0x6f,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x6d, 0x61, 0x78, 0x4e, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0xb8, 0x06, 0x0a, 0x0e, 0x47, 0x75, 0x69, 0x64, 0x65, 0x72, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f,
	0x6c, 0x69, 0x6f, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x6f, 0x72,
	0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x12, 0x22, 0x0a, 0x0c, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x69, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a,
	0x65, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0a, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x0e,
	0x62, 0x72, 0x65, 0x61, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x75, 0x6e,
	0x72, 0x65, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x12, 0x2a,
	0x0a, 0x10, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x73,
	0x6f, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0e, 0x69, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x61, 0x72, 0x67,
	0x69, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x6e, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x6e, 0x6f, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x6c,
	0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f,
	0x6c, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x73, 0x6f, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0e, 0x69, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x12, 0x20, 0x0a, 0x0b, 0x63, 0x75, 0x6d, 0x52, 0x65, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x63, 0x75, 0x6d, 0x52, 0x65, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x4d, 0x61, 0x72,
	0x67, 0x69, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x6c, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x69, 0x6e,
	0x74, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x6d,
	0x61, 0x69, 0x6e, 0x74, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x76,
	0x61, 0x69, 0x6c, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a,
	0x61, 0x76, 0x61, 0x69, 0x6c, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x4d, 0x61, 0x72,
	0x67, 0x69, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x52, 0x15, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e,
	0x12, 0x36, 0x0a, 0x16, 0x6f, 0x70, 0x65, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x69,
	0x74, 0x69, 0x61, 0x6c, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x16, 0x6f, 0x70, 0x65, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x6c, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x64, 0x6c, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x61, 0x64, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x73,
	0x6b, 0x4e, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x16, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0b, 0x61, 0x73, 0x6b, 0x4e, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x20, 0x0a, 0x0b,
	0x62, 0x69, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0b, 0x62, 0x69, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x22, 0xcf,
	0x0a, 0x0a, 0x0b, 0x47, 0x75, 0x69, 0x64, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x24, 0x0a, 0x0d,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x6f, 0x72, 0x69, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6f,
	0x72, 0x69, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x69, 0x67, 0x51, 0x74,
	0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x69, 0x67, 0x51, 0x74, 0x79,
	0x12, 0x20, 0x0a, 0x0b, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x51, 0x74, 0x79, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x51,
	0x74, 0x79, 0x12, 0x2a, 0x0a, 0x10, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x51, 0x75,
	0x6f, 0x74, 0x65, 0x51, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x51, 0x74, 0x79, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x6e,
	0x46, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x69, 0x6d,
	0x65, 0x49, 0x6e, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x69, 0x64, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x69, 0x64, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x6f, 0x70, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x6f, 0x70, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24,
	0x0a, 0x0d, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x4d,
	0x6f, 0x6e, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x76, 0x67, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x76, 0x67, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x68, 0x61, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x68, 0x61, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x26,
	0x0a, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72, 0x69, 0x63, 0x65, 0x50,
	0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65,
	0x64, 0x75, 0x63, 0x65, 0x4f, 0x6e, 0x6c, 0x79, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x77, 0x6f,
	0x72, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x6f, 0x72, 0x69, 0x67, 0x54, 0x79, 0x70, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6f, 0x72, 0x69, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x0d,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x69, 0x63, 0x65, 0x52, 0x61, 0x74, 0x65, 0x18,
	0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x69, 0x63, 0x65, 0x52, 0x61, 0x74, 0x65,
	0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x79, 0x49, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x79, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x79, 0x53, 0x75, 0x62, 0x49, 0x64, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x53, 0x75, 0x62, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x20, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x21, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x62, 0x61, 0x73, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x18, 0x22, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x62, 0x61, 0x73, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x1e, 0x0a, 0x0a,
	0x71, 0x75, 0x6f, 0x74, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x20, 0x0a, 0x0b,
	0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x18, 0x24, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x22,
	0x0a, 0x0c, 0x67, 0x6f, 0x6f, 0x64, 0x54, 0x69, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x65, 0x18, 0x25,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x67, 0x6f, 0x6f, 0x64, 0x54, 0x69, 0x6c, 0x6c, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x12, 0x2e, 0x0a, 0x12, 0x73, 0x65, 0x6c, 0x66, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x73, 0x65, 0x6c, 0x66, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x49,
	0x64, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c,
	0x69, 0x6f, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18,
	0x2a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x42, 0x0e, 0x5a, 0x0c, 0x2e, 0x2f, 0x70, 0x62, 0x73, 0x2f, 0x67, 0x75, 0x69, 0x64, 0x65, 0x72,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_params_proto_rawDescOnce sync.Once
	file_params_proto_rawDescData = file_params_proto_rawDesc
)

func file_params_proto_rawDescGZIP() []byte {
	file_params_proto_rawDescOnce.Do(func() {
		file_params_proto_rawDescData = protoimpl.X.CompressGZIP(file_params_proto_rawDescData)
	})
	return file_params_proto_rawDescData
}

var file_params_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_params_proto_goTypes = []interface{}{
	(*GuiderItem)(nil),         // 0: com.floolishman.guider.params.GuiderItem
	(*GuiderSymbolConfig)(nil), // 1: com.floolishman.guider.params.GuiderSymbolConfig
	(*GuiderPosition)(nil),     // 2: com.floolishman.guider.params.GuiderPosition
	(*GuiderOrder)(nil),        // 3: com.floolishman.guider.params.GuiderOrder
}
var file_params_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_params_proto_init() }
func file_params_proto_init() {
	if File_params_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_params_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuiderItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_params_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuiderSymbolConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_params_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuiderPosition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_params_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuiderOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_params_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_params_proto_goTypes,
		DependencyIndexes: file_params_proto_depIdxs,
		MessageInfos:      file_params_proto_msgTypes,
	}.Build()
	File_params_proto = out.File
	file_params_proto_rawDesc = nil
	file_params_proto_goTypes = nil
	file_params_proto_depIdxs = nil
}
